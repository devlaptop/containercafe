# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'fileutils'
require 'pathname'
# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

#Checking if a configuration file exists, if it does, then read its attribute values
#Otherwise use default values
pn = Pathname.new("../envs/dev-vbox/vagrant_config.rb")
CONFIG = File.expand_path(pn)
if File.exist?(CONFIG)
  require CONFIG
  puts "Info: vagrant_config file is found, and will be used" if ARGV[0] == "up"
  VM_COUNT=$vm_count
  VM_MEMORY=$vm_memory
  VM_CPU=$vm_cpu
  PROXY_NUM=$proxy_num
  PROXY_VM_MEMORY=$proxy_vm_memory
  INSTALLER_VM=$installer_num
  INSTALLER_VM_MEMORY=$installer_vm_memory
else
  puts "Info: vagrant_config file is missing, vagrant will use default values" if ARGV[0] == "up"
  VM_COUNT=2
  VM_MEMORY=1536
  VM_CPU=1
  PROXY_NUM=1
  PROXY_VM_MEMORY=1024
  INSTALLER_VM=1
  INSTALLER_VM_MEMORY=1024
end

puts "Info: vagrant is using the following configuration parameters:
------------------------
Master & Worker:
  VM_COUNT=#{VM_COUNT}
  VM_MEMORY=#{VM_MEMORY}
  VM_CPU=#{VM_CPU}
Proxy:
  PROXY_NUM=#{PROXY_NUM}
  PROXY_VM_MEMORY=#{PROXY_VM_MEMORY}
Installer:
  INSTALLER_VM=#{INSTALLER_VM}
  INSTALLER_VM_MEMORY=#{INSTALLER_VM_MEMORY}
------------------------
" if ARGV[0] == "up"

#Checking if the allocated memory is enough, if not, warn the user.
if VM_MEMORY < 1024
  puts "Warning: workers and master VMs have less than 1536 MB of memory"
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.ssh.insert_key = false

  (1..VM_COUNT).each do |i|
    config.vm.define "radiant#{i+1}" do |node|
      node.vm.network "private_network", ip: "192.168.10.#{i+1}"
      node.vm.hostname = "radiant#{i+1}"
      node.vm.synced_folder ".", "/vagrant", disabled: true

      node.vm.provider "virtualbox" do |nodeopts|
        nodeopts.name = "radiant#{i+1}"
        nodeopts.memory = VM_MEMORY
        nodeopts.cpus = VM_CPU
        nodeopts.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        nodeopts.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
      end
    end
  end

  config.vm.define 'proxy' do |proxy|
    proxy.vm.network "private_network", ip: "192.168.10.#{VM_COUNT+2}"
    proxy.vm.hostname = "proxy"
    proxy.vm.synced_folder ".", "/vagrant", disabled: true

    proxy.vm.provider "virtualbox" do |proxy_node|
      proxy_node.name   = "api-proxy"
      proxy_node.memory = PROXY_VM_MEMORY
    end
  end

  ['installer-tiny', 'active-installer-tiny'].each do |name|
    config.vm.define name, autostart: false do |installer|
      installer.vm.network "private_network", ip: "192.168.9.253"
      installer.vm.synced_folder ".", "/vagrant", disabled: true
      installer.vm.synced_folder "../../", "/home/vagrant/openradiant/", mount_options: ["dmode=775,fmode=664"]

      installer.vm.provision "file", source: "~/.vagrant.d/insecure_private_key", destination: "/home/vagrant/.vagrant.d/insecure_private_key"
      installer.vm.provision "shell", inline: "chmod 600 /home/vagrant/.vagrant.d/insecure_private_key"
      installer.vm.provision "shell", inline: "apt-get -qq update && apt-get -qq -y install python-pip build-essential libssl-dev libffi-dev python-dev && cd /home/vagrant/openradiant && pip install -r requirements.txt"

      if name == 'active-installer-tiny'
        installer.vm.provision "shell", privileged: false, inline: "cd /home/vagrant/openradiant/ansible && ansible-playbook -v -i /home/vagrant/openradiant/examples/envs/dev-vbox/radiant01.hosts env-basics.yml -e envs=/home/vagrant/openradiant/examples/envs -e env_name=dev-vbox"
        installer.vm.provision "shell", privileged: false, inline: "cd /home/vagrant/openradiant/ansible && ansible-playbook -v -i /home/vagrant/openradiant/examples/envs/dev-vbox/radiant01.hosts shard.yml -e envs=/home/vagrant/openradiant/examples/envs -e cluster_name=dev-vbox-radiant01 -e network_kind=flannel"
      end

      installer.vm.provider "virtualbox" do |installer_node|
        installer_node.name   = name
        installer_node.memory = INSTALLER_VM_MEMORY
      end
    end
  end
end
