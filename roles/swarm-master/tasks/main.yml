---

- set_fact: master_ip_address="{{ groups['swarm_master-' ~ cluster_name][0] }}"

- set_fact: mesos_master_zk="zk://{% for host in groups['zk-' ~ cluster_name] %}{{ host }}:{{ zookeeper_port }}{% if not loop.last %},{% endif %}{% endfor %}/mesos"

- debug: msg="master_ip_address => {{master_ip_address}}"
- debug: msg="mesos_master_zk => {{mesos_master_zk}}"

- name: open firewall for swarm
  ufw: rule=allow to_port={{ swarm_manager_host_port }} proto=tcp interface="network_interface" direction=in

- set_fact: role="--cluster-opt mesos.role=swarm"
  when: use_mesos_roles|bool

- set_fact: role=""
  when: not use_mesos_roles|bool

# deploy swarm manager only one one master for now
# TODO - use --cluster-opt  mesos.offerrefusetimeout to pass timeout when upstream
- shell: docker pull "{{swarm_image}}"
- name: deploy swarm manager
  when: master_ip_address == inventory_hostname
  docker:
    name: swarm
    image: "{{swarm_image}}"
    pull: missing
    state: reloaded
    restart_policy: always
    env:
      MESOS_REFUSE_SECONDS: "{{swarm_mesos_refuse_seconds}}"
      SWARM_MESOS_ROLE: "swarm"
    command: >
            manage -c mesos-experimental --cluster-opt mesos.address={{inventory_hostname}}
            --cluster-opt mesos.port={{swarm_manager_mesos_host_port}}
            --cluster-opt mesos.user=root
            --cluster-opt mesos.tasktimeout={{swarm_mesos_tasktimeout}}
            --cluster-opt mesos.offerrefusetimeout="{{swarm_mesos_refuse_seconds}}"
            {{role}}
            --cluster-opt mesos.offertimeout={{swarm_mesos_offertimeout}}
            --host 0.0.0.0:{{swarm_manager_port}}
            {{mesos_master_zk}}
    net: host
