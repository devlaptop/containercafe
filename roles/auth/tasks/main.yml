---

- name: "Sanity check that there is an etcd group defined"
  fail: msg="No etcd group defined"
  when: "'etcd-' ~ cluster_name not in groups"

- name: "Create directory {{ k8s_cert_dir }}"
  file: path={{ k8s_cert_dir }} state=directory mode=0755

- name: "Copy CA cert"
  copy: src={{ cert_dir }}/{{ ca_cert }} dest={{ k8s_cert_dir }}/ mode=0644

- name: "Copy apiserver key"
  copy: src={{ cert_dir }}/{{ rabac_cn }}.pem dest={{ k8s_cert_dir }}/ mode=0644

- name: "Copy apiserver cert"
  copy: src={{ cert_dir }}/{{ rabac_cn }}-key.pem dest={{ k8s_cert_dir }}/ mode=0644

- name: "Copy bootstrap abac policy file"
  copy: src=bootstrap-abac-policy dest={{ k8s_etc_dir }}/ mode=0644

- name: "Find one of the etcd servers"
  set_fact:
    one_etcd_host: "{{ groups['etcd-' ~ cluster_name][0] }}"

- name: "Place bootstrap policy to etcd server"
  shell: curl -L -XPUT --data-urlencode value@{{ k8s_etc_dir }}/bootstrap-abac-policy
      http://{{ one_etcd_host }}:{{ etcd_port }}/v2/keys/{{ rabac_policy_file }}

- name: "Create auth_policy_file param"
  set_fact:
    auth_policy_file_param: |
      {% set comma = joiner(",") %}
      {%- for host in groups['etcd-' ~ cluster_name] -%}
        {{ comma() }}http://{{ host }}:{{ etcd_port }}/{{ rabac_policy_file }}
      {%- endfor -%}

- name: "Pull remoteabac docker image"
  shell: docker pull {{ rabac_image }}

- name: "Deploy remoteabac"
  docker:
    name: remoteabac
    image: "{{ rabac_image }}"
    pull: missing
    state: reloaded
    restart_policy: always
    net: host
    ports:
      - "{{ rabac_port }}:{{ rabac_port }}"
    volumes:
      - "{{ k8s_cert_dir }}:{{ k8s_cert_dir }}"
    command: --address=:{{ rabac_port }} --tls-cert-file={{ k8s_cert_dir }}/{{ rabac_cn }}.pem
        --tls-private-key-file={{ k8s_cert_dir }}/{{ rabac_cn }}-key.pem
        --authorization-policy-file=etcd@{{ auth_policy_file_param }}

- name: "Check if restart of remoteabac is needed"
  docker:
    name: remoteabac
    image: "{{ rabac_image }}"
    state: restarted
  when: hostvars['localhost']['regenerate_all_certs'] is defined
