---

# Building the proxy image:

  - name: copy src into dockerFile directory
    shell: cp -r ../proxy/src ../proxy/{{proxy_context}}

  - name: copy scripts into Dockerfile directory
    copy: src=../proxy/{{item}} dest=../proxy/{{proxy_context}}
    with_items:
     - create_tenant.sh
     - mk_user_cert.sh
     - mk_kubeconfig.sh

  - name: build the {{proxy_image_name}} image (this may take a few minutes)
    command: docker build -t "{{proxy_image_name}}" "../proxy/{{proxy_context}}/"

  - debug: msg="Finished Building the image, now building the container"

# Setting up the certs for the Proxy container

  - name: setting CERTS
    set_fact: CERTS="{{ansible_env.HOME}}/.openradiant/envs/{{env_name}}"

  - name: setting ACERTS
    set_fact: ACERTS="{{CERTS}}/admin-certs"

  - name: create envs directory
    file: path={{CERTS}} state=directory mode=0755


  - stat: path={{ACERTS}}/hjserver.pem
    register: hjs_pem

  - name: copy the api-proxy-openssl.cnf
    copy: src=../ansible/roles/keygen-shard/files/api-proxy-openssl.cnf dest=/{{ACERTS}}/api-proxy-openssl.cnf
    when: hjs_pem.stat.exists == False

  - name: set PASSWD when generating certs
    set_fact: PASSWD="DyJtZPNjkMeY7zgk"
    when: hjs_pem.stat.exists == False

  - name: generate certs when missing or changed
    command: "{{item}} chdir={{ACERTS}}/"
    with_items:
        - openssl genrsa -out hjserver.key 4096
        - openssl req -new -key hjserver.key -out hjserver.csr -subj "/CN=localhost" -config api-proxy-openssl.cnf
        - openssl x509 -req -in hjserver.csr -CA ca.pem -CAkey ca-key.pem -CAserial ca.srl -days 1500 -extensions v3_req -out hjserver.pem -passin pass:{{PASSWD}} -extfile api-proxy-openssl.cnf
    when: hjs_pem.stat.exists == False

  - name: create an empty creds.json if necessary
    file: path={{CERTS}}/creds.json  state=touch

# starting the proxy container

  - name: check if the proxy container exists
    command: docker ps -aqf "name=api-proxy"
    register: result


  - name: remove api-proxy container if a previous instance already exists
    shell: docker rm -f api-proxy
    when: result.stdout !=""

  - name: start the api-proxy container
    docker:
     name: api-proxy
     state: reloaded
     #pull: "{{image_pull_type}}"
     restart_policy: always
     image: "containercafe/api-proxy"
     ports:
      - "8087:8087"
     volumes:
      - "{{CERTS}}:/opt/tls_certs"
     env:
        env_name={{env_name}}
