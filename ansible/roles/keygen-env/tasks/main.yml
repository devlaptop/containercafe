---
- name: parse cluster name
  delegate_to: localhost
  shell: echo "{{cluster_name}}" | cut -d- -f1,2; echo "{{cluster_name}}" | cut -d- -f3-
  register: nameres
  changed_when: False

- set_fact:
    env_name: "{{ nameres.stdout_lines[0] }}"
    cluster_tail: "{{ nameres.stdout_lines[1] }}"

- debug: msg="environment name is '{{env_name}}', remainder of cluster name is '{{cluster_tail}}'"

- name: "Check if k8s CA cert exists"
  stat: path={{ cert_dir }}/admin-certs/{{ ca_cert }}
  register: cacert

- debug: msg="cacert path= {{ cert_dir }}/admin-certs/{{ ca_cert }} exists= {{cacert.stat.exists}}"

- name: "Check if k8s CA key exists"
  stat: path={{ cert_dir }}/admin-certs/{{ ca_key }}
  register: cakey

- set_fact: ca_is_newer=False
- name: "Test if CA cert and key are newer"
  when: cacert.stat.exists == True and cakey.stat.exists == True and vip.stat.exists == True and cacert.stat.mtime > vip.stat.mtime
  set_fact: ca_is_newer=True

- name: "Test if all certs need to be regenerated"
  when: cacert.stat.exists == True and (cakey.stat.exists == False or vip_changed == True or ca_is_newer == True)
  set_fact: regenerate_all_certs=True

- name: "Clean up existing certs"
  shell: ls -d {{ cert_dir }}/admin-certs/* | grep -v {{ ca_key }} | grep -v {{ ca_cert }} | grep -v vip | xargs rm
  when: regenerate_all_certs is defined

- name: "Create k8s CA files"
  when: cacert.stat.exists == False or cakey.stat.exists == False
  shell: "{{ item }}"
  with_items:
    - rm -rf {{ cert_dir }}
    - mkdir -p {{ cert_dir }}/admin-certs/
    - openssl genrsa -out {{ cert_dir }}/admin-certs/{{ ca_key }} 4096
    - openssl req -x509 -new -nodes -key {{ cert_dir }}/admin-certs/{{ ca_key }} -days 10000
      -out {{ cert_dir }}/admin-certs/{{ ca_cert }} -subj "/CN=kubernetes-ca"
    - chmod 0400 {{ cert_dir }}/admin-certs/{{ ca_key }}
    - chmod 0444 {{ cert_dir }}/admin-certs/{{ ca_cert }}

- name: "Check if k8s admin key exists"
  stat: path={{ cert_dir }}/admin-certs/{{ k8s_admin_cn }}-key.pem
  register: admin_key

- name: "Check if k8s admin cert key exists"
  stat: path={{ cert_dir }}/admin-certs/{{ k8s_admin_cn }}.pem
  register: admin_cert

- name: "Create k8s admin account tls conf"
  when: regenerate_all_certs is defined or admin_key.stat.exists == False or admin_cert.stat.exists == False
  copy: src=client-openssl.cnf.tmpl dest={{ cert_dir }}/admin-certs/client-openssl.cnf mode=0644

- name: "Generate k8s admin account tls key + cert req"
  when: regenerate_all_certs is defined or admin_key.stat.exists == False or admin_cert.stat.exists == False
  shell: "{{ item }}"
  with_items:
    - openssl genrsa -out {{ cert_dir }}/admin-certs/{{ k8s_admin_cn }}-key.pem 4096
    - openssl req -subj '/CN={{ k8s_admin_cn }}' -new
      -key {{ cert_dir }}/admin-certs/{{ k8s_admin_cn }}-key.pem
      -out {{ cert_dir }}/admin-certs/{{ k8s_admin_cn }}.csr

- name: "Generate k8s admin account tls cert without password"
  when: (regenerate_all_certs is defined or admin_key.stat.exists == False or admin_cert.stat.exists == False) and CA_passwd is not defined
  shell: openssl x509 -req -days 1500 -sha256 -in {{ cert_dir }}/admin-certs/{{ k8s_admin_cn }}.csr
         -CA {{ cert_dir }}/admin-certs/{{ ca_cert }} -CAkey {{ cert_dir }}/admin-certs/{{ ca_key }}
         -CAserial {{ cert_dir }}/admin-certs/{{ ca_srl }} -out {{ cert_dir }}/admin-certs/{{ k8s_admin_cn }}.pem
         -extfile {{ cert_dir }}/admin-certs/client-openssl.cnf

- name: "Generate k8s admin account tls cert with password"
  when: (regenerate_all_certs is defined or admin_key.stat.exists == False or admin_cert.stat.exists == False) and CA_passwd is defined
  shell: openssl x509 -req -days 1500 -sha256 -in {{ cert_dir }}/admin-certs/{{ k8s_admin_cn }}.csr
         -CA {{ cert_dir }}/admin-certs/{{ ca_cert }} -CAkey {{ cert_dir }}/admin-certs/{{ ca_key }}
         -CAserial {{ cert_dir }}/admin-certs/{{ ca_srl }} -out {{ cert_dir }}/admin-certs/{{ k8s_admin_cn }}.pem
         -extfile {{ cert_dir }}/admin-certs/client-openssl.cnf -passin pass:{{ CA_passwd }}

- name: "Cleanup k8s admin account cert artifacts"
  when: regenerate_all_certs is defined or admin_key.stat.exists == False or admin_cert.stat.exists == False
  shell: "{{ item }}"
  with_items:
    - chmod 0400 {{ cert_dir }}/admin-certs/{{ k8s_admin_cn }}-key.pem
    - chmod 0444 {{ cert_dir }}/admin-certs/{{ k8s_admin_cn }}.pem
