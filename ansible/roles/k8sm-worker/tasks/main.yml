---

- name: Create directory {{ k8s_cert_dir }}
  file: path={{ k8s_cert_dir }} state=directory mode=0755

- name: Copy CA cert
  copy: src={{ cert_dir }}/{{ ca_cert }} dest={{ k8s_cert_dir }}/ mode=0644

- name: Copy kubelet key
  copy: src={{ cert_dir }}/{{ k8s_kubelet_cn }}.pem dest={{ k8s_cert_dir }}/ mode=0644

- name: Copy kubelet cert
  copy: src={{ cert_dir }}/{{ k8s_kubelet_cn }}-key.pem dest={{ k8s_cert_dir }}/ mode=0644

- name: Create directory {{ k8s_cert_dir }}
  file: path={{ k8s_cert_dir }} state=directory mode=0755
  when: kubernetes_deploy

- name: Create directory {{ k8s_log_dir }}
  file: path={{ k8s_log_dir }} state=directory mode=0755
  when: kubernetes_deploy

- name: Create directory {{ k8s_kubelet_manifests_dir }}
  file: path={{ k8s_kubelet_manifests_dir }} state=directory mode=0755
  when: kubernetes_deploy

- name: Reload k8s services if certs are changed
  shell: "{{ item }} "
  with_items:
    - rm -rf {{ k8s_kubelet_manifests_dir }}/*
    - sleep 120
  when: hostvars['localhost']['regenerate_all_certs'] is defined and kubernetes_deploy


- name: Copy admin key
  copy: src={{ cert_dir }}/{{ k8s_admin_cn }}.pem dest={{ k8s_cert_dir }}/ mode=0644
  when: kubernetes_deploy

- name: Copy admin cert
  copy: src={{ cert_dir }}/{{ k8s_admin_cn }}-key.pem dest={{ k8s_cert_dir }}/ mode=0644
  when: kubernetes_deploy

- name: Copy user key
  copy: src={{ cert_dir }}/{{ k8s_user_cn }}.pem dest={{ k8s_cert_dir }}/ mode=0644
  when: kubernetes_deploy

- name: Copy user cert
  copy: src={{ cert_dir }}/{{ k8s_user_cn }}-key.pem dest={{ k8s_cert_dir }}/ mode=0644
  when: kubernetes_deploy

- name: Copy kubelet kubeconfig
  template: src={{ k8s_kubelet_cn }}-kubeconfig.tmpl dest={{ k8s_etc_dir }}/{{ k8s_kubelet_cn }}-kubeconfig mode=0644
  when: kubernetes_deploy
  
- name: Copy admin kubeconfig
  template: src={{ k8s_admin_cn }}-kubeconfig.tmpl dest={{ k8s_etc_dir }}/{{ k8s_admin_cn }}-kubeconfig mode=0644
  when: kubernetes_deploy

- name: Copy user kubeconfig
  template: src={{ k8s_user_cn }}-kubeconfig.tmpl dest={{ k8s_etc_dir }}/{{ k8s_user_cn }}-kubeconfig
  when: kubernetes_deploy

- name: Check if we have a kraken installed
  stat: path=/root/stackrc
  register: stackrc
  when: kubernetes_deploy

- name: Copy kubelet and kubectl from image to local (for bootstrapping)
  shell: "{{ item }} "
  with_items:
    - docker create --name this_is_a_temporary_container_i_will_delete {{ kube_image }}
    - docker cp this_is_a_temporary_container_i_will_delete:/opt/kubernetes/bin/kubelet /usr/local/bin/kubelet
    - docker cp this_is_a_temporary_container_i_will_delete:/opt/kubernetes/bin/kubectl /usr/local/bin/kubectl
    - docker rm this_is_a_temporary_container_i_will_delete
  when: kubernetes_deploy

- name: Copy kube-proxy yaml file to {{ k8s_kubelet_manifests_dir }}
  template: src={{k8s_kube_proxy_cn}}.tmpl dest={{ k8s_kubelet_manifests_dir }}/kube-proxy.yaml mode=0644
  when: kubernetes_deploy

- name: Create kubelet upstart service
  template: src=kubelet.conf.tmpl dest=/etc/init/kubelet.conf mode=0644
  when: kubernetes_deploy

- name: Start kubelet upstart service
  service: name=kubelet state=started
  when: kubernetes_deploy

- name: Test whether the user has a .profile
  stat:
    path: "{{ ansible_user_dir }}/.profile"
  register: rslt

- name: Create a .profile for the user
  command: touch {{ ansible_user_dir }}/.profile
  when: rslt|failed

- name: Set up KUBECONFIG environment variable for root user
  lineinfile: dest="{{ ansible_user_dir }}/.profile" line="export KUBECONFIG={{ k8s_etc_dir }}/admin-kubeconfig"
  when: kubernetes_deploy
