---

- name: "Sanity check that there is an etcd group defined"
  fail: msg="No etcd group defined"
  when: "'etcd-' ~ cluster_name not in groups"

- name: "Create directory {{ k8s_cert_dir }}"
  file: path={{ k8s_cert_dir }} state=directory mode=0755

- name: "Create directory {{ k8s_etc_dir }}"
  file: path={{ k8s_etc_dir }} state=directory mode=0755

- name: "Create directory {{ k8s_log_dir }}"
  file: path={{ k8s_log_dir }} state=directory mode=0755

- name: "Create directory {{ k8s_kubelet_manifests_dir }}"
  file: path={{ k8s_kubelet_manifests_dir }} state=directory mode=0755

- name: "Create directory {{ k8s_podmaster_manifests_dir }}"
  file: path={{ k8s_podmaster_manifests_dir }} state=directory mode=0755

- name: "Reload k8s services if certs are changed"
  shell: "{{ item }} "
  with_items:
    - rm -rf {{ k8s_kubelet_manifests_dir }}/*
    - sleep 120
  when: hostvars['localhost']['regenerate_all_certs'] is defined

- name: "Copy CA cert"
  copy: src={{ cert_dir }}/admin-certs/{{ ca_cert }} dest={{ k8s_cert_dir }}/ mode=0644

- name: "Copy apiserver key"
  copy: src={{ cert_dir }}/{{cluster_tail}}/admin-certs/{{ k8s_apiserver_cn }}.pem dest={{ k8s_cert_dir }}/ mode=0644

- name: "Copy apiserver cert"
  copy: src={{ cert_dir }}/{{cluster_tail}}/admin-certs/{{ k8s_apiserver_cn }}-key.pem dest={{ k8s_cert_dir }}/ mode=0644

- name: "Copy scheduler key"
  copy: src={{ cert_dir }}/{{cluster_tail}}/admin-certs/{{ k8s_scheduler_cn }}.pem dest={{ k8s_cert_dir }}/ mode=0644

- name: "Copy scheduler cert"
  copy: src={{ cert_dir }}/{{cluster_tail}}/admin-certs/{{ k8s_scheduler_cn }}-key.pem dest={{ k8s_cert_dir }}/ mode=0644

- name: "Copy controller-manager key"
  copy: src={{ cert_dir }}/{{cluster_tail}}/admin-certs/{{ k8s_controller_manager_cn }}.pem dest={{ k8s_cert_dir }}/ mode=0644

- name: "Copy controller-manager cert"
  copy: src={{ cert_dir }}/{{cluster_tail}}/admin-certs/{{ k8s_controller_manager_cn }}-key.pem dest={{ k8s_cert_dir }}/ mode=0644

- name: "Copy admin key"
  copy: src={{ cert_dir }}/admin-certs/{{ k8s_admin_cn }}.pem dest={{ k8s_cert_dir }}/ mode=0644

- name: "Copy admin cert"
  copy: src={{ cert_dir }}/admin-certs/{{ k8s_admin_cn }}-key.pem dest={{ k8s_cert_dir }}/ mode=0644

- name: "Copy user key"
  copy: src={{ cert_dir }}/{{cluster_tail}}/admin-certs/{{ k8s_user_cn }}.pem dest={{ k8s_cert_dir }}/ mode=0644

- name: "Copy user cert"
  copy: src={{ cert_dir }}/{{cluster_tail}}/admin-certs/{{ k8s_user_cn }}-key.pem dest={{ k8s_cert_dir }}/ mode=0644

- name: "Copy scheduler kubeconfig"
  template: src={{ k8s_scheduler_cn }}-kubeconfig.tmpl dest={{ k8s_etc_dir }}/{{ k8s_scheduler_cn }}-kubeconfig mode=0644

- name: "Copy controller manager kubeconfig"
  template: src={{ k8s_controller_manager_cn }}-kubeconfig.tmpl dest={{ k8s_etc_dir }}/{{ k8s_controller_manager_cn }}-kubeconfig mode=0644

- name: "Copy kubelet kubeconfig"
  template: src={{ k8s_kubelet_cn }}-kubeconfig.tmpl dest={{ k8s_etc_dir }}/{{ k8s_kubelet_cn }}-kubeconfig mode=0644

- name: "Copy admin kubeconfig"
  template: src={{ k8s_admin_cn }}-kubeconfig.tmpl dest={{ k8s_etc_dir }}/{{ k8s_admin_cn }}-kubeconfig mode=0644

- name: "Copy user kubeconfig"
  template: src={{ k8s_user_cn }}-kubeconfig.tmpl dest={{ k8s_etc_dir }}/{{ k8s_user_cn }}-kubeconfig

- name: "Copy webhook config"
  template: src=webhook-config.tmpl dest={{ k8s_etc_dir }}/webhook-config mode=0644

- name: "Copy mesos-cloud config"
  template: src=mesos-cloud.conf.tmpl dest={{ k8s_etc_dir }}/mesos-cloud.conf mode=0644
  when: kubernetes_on_mesos_deploy|bool

- name: "Copy apiserver yaml file to {{ k8s_kubelet_manifests_dir }}"
  template: src={{ k8s_apiserver_cn }}.yaml.tmpl dest={{ k8s_kubelet_manifests_dir }}/{{ k8s_apiserver_cn }}.yaml mode=0644

- name: "Copy podmaster yaml file to {{ k8s_kubelet_manifests_dir }}"
  template: src=podmaster.yaml.tmpl dest={{ k8s_kubelet_manifests_dir }}/podmaster.yaml mode=0644

- name: "Copy scheduler yaml file to {{ k8s_podmaster_manifests_dir }}"
  template: src={{ k8s_scheduler_cn }}.yaml.tmpl dest={{ k8s_podmaster_manifests_dir }}/{{ k8s_scheduler_cn }}.yaml mode=0644

- name: "Copy controller manager yaml file to {{ k8s_podmaster_manifests_dir }}"
  template: src={{ k8s_controller_manager_cn }}.yaml.tmpl dest={{ k8s_podmaster_manifests_dir }}/{{ k8s_controller_manager_cn }}.yaml mode=0644

- name: "Copy kubelet and kubectl from image to local (for bootstrapping)"
  shell: "{{ item }} "
  with_items:
    - docker create --name this_is_a_temporary_container_i_will_delete {{ kube_image }}
    - docker cp this_is_a_temporary_container_i_will_delete:/opt/kubernetes/bin/kubelet /usr/local/bin/kubelet
    - docker cp this_is_a_temporary_container_i_will_delete:/opt/kubernetes/bin/kubectl /usr/local/bin/kubectl
    - docker rm this_is_a_temporary_container_i_will_delete

- name: "Create kubelet upstart service"
  template: src=kubelet.conf.tmpl dest=/etc/init/kubelet.conf mode=0644
  when: is_upstart|bool

- name: "Create kubelet service systemd unit file"
  template: src=kubelet.service.tmpl dest=/lib/systemd/system/kubelet.service mode=0644
  when: is_systemd|bool

- name: "Start kubelet upstart service"
  service: name=kubelet state=started

- name: Ensure user profile exists
  shell: if [ -f {{ ansible_user_dir }}/.profile ]; then echo OkeyDokey; else touch {{ ansible_user_dir }}/.profile; fi
  register: rslt
  changed_when: "'OkeyDokey' not in rslt.stdout"

- name: "Set up KUBECONFIG environment variable for the user"
  lineinfile: dest="{{ ansible_user_dir }}/.profile" line="export KUBECONFIG={{ k8s_etc_dir }}/admin-kubeconfig"
