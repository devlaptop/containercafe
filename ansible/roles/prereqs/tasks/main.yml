---

- include: setup_repos.yml
  when: use_private_mirrors is defined and use_private_mirrors

# Tasks for setting up the installation prereqs
- stat: path=/var/lib/apt/lists/lock
  register: apt_lock

- name: create apt lock file if it doesn't exist
  become: yes
  shell: "mkdir -p /var/lib/apt/lists && touch /var/lib/apt/lists/lock"
  when: not apt_lock.stat.exists

- name: apt-get update
  apt:
    update_cache: yes
  register: agu_rslt

- name: Install prereq Linux packages
  apt: name={{item}} state=present
  with_items:
       - curl
       - vim
       - ntp
       - python-pip
       - libsystemd-journal0
       - ufw

- name: ensure /opt/bin exists
  file:
    dest: /opt/bin
    state: directory

- name: Install Flannel binary
  when: network_kind == 'flannel'
  copy:
    dest: /opt/bin/
    src: "{{ lookup('env','HOME') }}/tmp/flannel-{{flannel_version}}/flanneld"
    mode: a+x

- name: Add docker apt keys
  apt_key: keyserver=hkp://keyserver.ubuntu.com:80 id=58118E89F3A912897C070ADBF76221572C52609D
  when: use_private_mirrors is not defined or not use_private_mirrors

- name: Update apt
  apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-trusty main' state=present
  when: use_private_mirrors is not defined or not use_private_mirrors

- name: Install Docker
  apt: pkg={{docker_package}} update_cache=yes state=present
  register: docker_installed

- name: add the ssh user to the docker group
  user: name={{ansible_ssh_user}} groups=docker append=yes

# Allow insecure infrastrucure registry for the env.
- name: ensure DOCKER_OPTS set in /etc/default/docker
  lineinfile: dest=/etc/default/docker
              regexp='^DOCKER_OPTS="\$DOCKER_OPTS --userland'
              insertafter=EOF
              line='DOCKER_OPTS="$DOCKER_OPTS --userland-proxy=false {% if infra_docker_private_registry is defined %}--insecure-registry {{infra_docker_private_registry}} {% endif %}"'
  when: infra_docker_private_registry is defined
  register: docker_configured

- name: restart docker on config change
  service: name=docker state=restarted
  when: docker_configured.changed

- name: make sure required PyPi packages are installed
  pip: name={{ item }} state=present
  with_items:
     - docker-py
     - netaddr

- name: enable ufw logging
  ufw: logging=on

- name: Permit SSH in
  ufw: rule=allow to_port=22 proto=tcp interface={{network_interface}} direction=in

- name: Enable UFW. Allow everything
  ufw: state=enabled policy=allow
