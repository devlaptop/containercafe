---
################################################################
# Envs default location
################################################################
envs: ../examples/envs

################################################################
# Network Interface (control plane)
################################################################

network_interface: eth1

################################################################
# Certificates
################################################################

cert_dir: "{{playbook_dir}}/certs/{{cluster_name}}"
ca_cert: ca.pem
ca_key: ca-key.pem
ca_srl: ca.srl

################################################################
# VIP
################################################################

# A Virtual IP (VIP) address is normally used by clients of various
# master components when connecting to that component, so that the
# binding of this address to machine can vary over time as part of the
# HA solution.

# A boolean controlling whether the VIP is dynamically bound to a
# machine.  This must be set to True if the size of the Mesos master
# group is greater than one.  We use
# https://www.pureftpd.org/project/ucarp for the dynamic binding.

ha_deploy: True

# The following variables are details of how the VIP is used.  There
# is no known reason to vary any of them.

vip_k8s_apiserver_ip: "{{master_vip}}"
vip_k8s_apiserver_port: 443

vip_k8s_rabac_ip: "{{master_vip}}"
vip_k8s_rabac_port: 444

vip_k8s_scheduler_ip: "{{master_vip}}"
vip_k8s_scheduler_port: 81

vip_mesos_master_ip: "{{master_vip}}"

vip_swarm_master_ip: "{{master_vip}}"
vip_swarm_master_port: 2375


###############################################################
# HAproxy
###############################################################

# HAProxy is always between master component clients and servers.  The
# following variables control details of its configuration.  There is
# no known reason to vary any of them.

haproxy_image: haproxy:1.5
haproxy_stats_port: 9000
traffic_type: tcp
lb_k8s: true
lb_k8s_secure: false
lb_swarm: true
lb_mesos: false

################################################################
# Kubernetes
################################################################

# A boolean controlling whether Kubernetes is deployed in any way at
# all.

kubernetes_deploy: True

# Another boolean.  Controls whether Kubernetes is deployed as a Mesos
# framework.  Should be set consistently with other relevant
# settings.

kubernetes_on_mesos_deploy: True

kube_image: openradiant/km
kube_podmaster_image: gcr.io/google_containers/podmaster:1.1
kube_infra_image: gcr.io/google_containers/pause
k8s_etc_dir: /etc/kubernetes
k8s_cert_dir: "{{k8s_etc_dir}}/cert"
k8s_log_dir: /var/log/kubernetes
k8s_kubelet_manifests_dir: /etc/kubernetes/manifests
k8s_podmaster_manifests_dir: /srv/kubernetes/manifests
kube_mesos_offer_ttl: 10000m
# by default we do not set the scheduler to use the CNI plugin
cni_plugin: ""

# Kubernetes components will use cert /CN to authenticate
k8s_apiserver_cn: apiserver
k8s_scheduler_cn: scheduler
k8s_controller_manager_cn: controller-manager
k8s_kubelet_cn: kubelet
k8s_admin_cn: admin
k8s_user_cn: user
k8s_kube_proxy_cn: kube-proxy

k8s_service_ip_range: 10.10.10.0/24
k8s_apiserver_sport: 8443
k8s_apiserver_port: 8080
k8s_scheduler_port: 10251
kubernetes_tunnel_to_apiserver: True

pod_subnet: "172.17.0.0/16"

k8s_hyperkube_image: gcr.io/google_containers/hyperkube-amd64
k8s_hyperkube_version: v1.3.0


################################################################
# Etcd
################################################################

# The secondary variable that controls whether etcd is deployed.

etcd_deploy: False

etcd_image: quay.io/coreos/etcd
etcd_port: 4001
etcd_advertise_peer_port: 2380
etcd_listen_client_port: 2379


################################################################
# Remote ABAC
################################################################

rabac_image: openradiant/remoteabac
rabac_port: 8888
rabac_policy_file: abac-policy
rabac_cn: remoteabac


################################################################
# Zookeeper
################################################################

zookeeper_image: openradiant/zookeeper
zookeeper_port: 2181

################################################################
# Mesos
################################################################

# A boolean controlling whether Mesos is deployed

mesos_deploy: True

mesos_master_image: mesosphere/mesos-master:1.0.0-rc2
mesos_slave_image: mesosphere/mesos-slave:1.0.0-rc2
mesos_master_port: 5050
mesos_slave_port: 5050
use_mesos_roles: true
mesos_roles:
  swarm: 0.5
  kube: 0.5
mesos_slaves_resources: "cpus(swarm):2;cpus(kube):2;mem(swarm):4096;mem(kube):4096;disk(swarm):204800;disk(kube):204800;ports(swarm):[15000-25000];ports(kube):[55000-65000]"
mesos_allocation_interval: 500ms


################################################################
# Docker
################################################################

docker_package: docker-engine=1.11.2-0~trusty
docker_engine_port: 2375


################################################################
# Swarm
################################################################

# A boolean controlling whether the SwarmV1 master is deployed.

swarm_deploy: True

swarm_image: openradiant/swarm
swarm_manager_host_port: 4375
swarm_manager_port: 4375
swarm_manager_mesos_host_port: 3376
swarm_manager_mesos_port: 3375
swarm_mesos_refuse_seconds: 0.1s
swarm_mesos_tasktimeout: 10m
swarm_mesos_offertimeout: 10000m


###############################################################
# Networking
################################################################

# The name of the networking plugin to use.  Built-in plugins include:
# "bridge" for plain old docker bridge networking, "flannel" for
# Flannel with the host-gw backend.  See the networking plugin details
# in the doc on Ansible structure.

network_kind: bridge

# An array of arguments to add to the k8s scheduler command for the
# sake of the networking plugin.

k8s_scheduler_network_args: []

# The version of Flannel to use

flannel_version: "0.5.5"


###############################################################
# Infrastructure docker registry (used to deploy radiant components)
################################################################

# possible values: v1 or v2
infrastructure_docker_registry_type: v2
# use 'always' with v2 and 'missing' with v1
image_pull_type: always


